package animalchess;

import java.util.ArrayList;

/**
 * A class for the Shogi Player.
 * @version 1
 */
public class Player {
    private String name;
    private int playerNumber;
    // initialCapacity: 8, because up to 8 of opponent's Pieces could be captured.
    private ArrayList<Piece> hand = new ArrayList<>(8);
    // Will be set to true when a Player has won the game.
    private boolean won = false;

    /**
     * A constructor for the class Game.
     * @param name of type String represents the Player's name.
     * @param playerNumber of type int represents a Player's playerNumber.
     */
    public Player(String name, int playerNumber) {
        this.name = name;
        this.playerNumber = playerNumber;
    }

    /** A standard getter for name.
     * @return name of type String
     */
    public String getName() {
        return name;
    }

    /**
     * A standard getter for playerNumber
     * @return playerNumber of type int
     */
    public int getPlayerNumber() {
        return playerNumber;
    }

    /**
     * A getter for hand
     * @return hand of type ArrayList<Piece>
     */
    public ArrayList<Piece> getHand() {
        return hand;
    }

    /**
     * A method to add a Piece to a Player's hand.
     * @param piece of type Piece,  the Piece to be added to the Player's hand.
     */
    public void addPieceToHand (Piece piece) {
        this.hand.add(piece);
        piece.getSquare().removePiece();
    }

    /**
     * A method to drop a Piece from a Player's hand to a Square.
     * @param piece of type Piece, the Piece that should be dropped.
     * @param square of type Square, the Square that Piece should to dropped onto.
     */
    public void dropPiece(Piece piece, Square square) {
        this.hand.remove(piece);
        square.placePiece(piece);
    }

    /**
     * A method that when called on a Player, wins them the Game.
     * Updates a Player's won attribute, which is false by default, to true.
     * Only ever called on the capturer of an opponent's Lion, winning them the Game.
     */
    public void winGame() {
        this.won = true;
    }

    /** A method to assert that a Player has won the Game.
     * @return won, a Player's attribute of type boolean, which is set to false by default,
     * but is updated to true when the Game is won, i.e. the opponent's Lion has been captured.
     */
    public boolean hasWon() {
        return won;
    }

    /**
     * A method to define the direction, 'up' or 'down' the board, a Player 'attacks' in.
     * This is useful in order to determine a Piece's legal moves, as these - with the exception of Lion - are
     * a mirror-inverse of the opponent's legal moves.
     * @return int 1 for Player 0 and int -1 for Player 1.
     */
    public int getDirection() {
        // Returns the direction this player moves in on the board
        // Positive for player 0 and negative for player 1.
        // TODO Make sure this works, was collapsed by IntelliJ.
        if (playerNumber == 0) {
            return 1;
        }
        else {
            return -1;
        }
    }

    /**
     * A method to assert one Player equals another.
     * @param o of type Object represents a Player.
     * @return true if the Player's are equal and false if not.
     */
    // Intellij's cmd+n function was used to autogenerate the following method.
    // Override because the superclass is Object.
    // Begin autogenerated code
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Player player = (Player) o;
        return playerNumber == player.playerNumber;
    }
    // End autogenerated code
}
